// Verilated -*- C++ -*-
// DESCRIPTION: Verilator output: Tracing implementation internals
#include "verilated_vcd_c.h"
#include "Vsparrow__Syms.h"


VL_ATTR_COLD void Vsparrow___024root__trace_init_sub__TOP__0(Vsparrow___024root* vlSelf, VerilatedVcd* tracep) {
    if (false && vlSelf) {}  // Prevent unused
    Vsparrow__Syms* const __restrict vlSymsp VL_ATTR_UNUSED = vlSelf->vlSymsp;
    VL_DEBUG_IF(VL_DBG_MSGF("+    Vsparrow___024root__trace_init_sub__TOP__0\n"); );
    // Init
    const int c = vlSymsp->__Vm_baseCode;
    // Body
    tracep->declBit(c+109,"clk", false,-1);
    tracep->declBit(c+110,"rstn", false,-1);
    tracep->declBit(c+111,"holdn", false,-1);
    tracep->declBus(c+112,"ra0", false,-1, 7,0);
    tracep->declBus(c+113,"ra1", false,-1, 7,0);
    tracep->declBus(c+114,"ra2", false,-1, 7,0);
    tracep->declBus(c+115,"ra3", false,-1, 7,0);
    tracep->declBus(c+116,"rb0", false,-1, 7,0);
    tracep->declBus(c+117,"rb1", false,-1, 7,0);
    tracep->declBus(c+118,"rb2", false,-1, 7,0);
    tracep->declBus(c+119,"rb3", false,-1, 7,0);
    tracep->declBus(c+120,"op1", false,-1, 4,0);
    tracep->declBus(c+121,"op2", false,-1, 2,0);
    tracep->declBit(c+122,"rc_we", false,-1);
    tracep->declArray(c+123,"ctrl", false,-1, 267,0);
    tracep->declBus(c+132,"bpv", false,-1, 31,0);
    tracep->declBus(c+133,"bp", false,-1, 1,0);
    tracep->declBus(c+134,"result0", false,-1, 15,0);
    tracep->declBus(c+135,"result1", false,-1, 15,0);
    tracep->declBus(c+136,"s1bp", false,-1, 31,0);
    tracep->declBus(c+137,"s2bp", false,-1, 31,0);
    tracep->pushNamePrefix("wrapper ");
    tracep->declBit(c+109,"clk", false,-1);
    tracep->declBit(c+110,"rstn", false,-1);
    tracep->declBit(c+111,"holdn", false,-1);
    tracep->declBus(c+112,"ra0", false,-1, 7,0);
    tracep->declBus(c+113,"ra1", false,-1, 7,0);
    tracep->declBus(c+114,"ra2", false,-1, 7,0);
    tracep->declBus(c+115,"ra3", false,-1, 7,0);
    tracep->declBus(c+116,"rb0", false,-1, 7,0);
    tracep->declBus(c+117,"rb1", false,-1, 7,0);
    tracep->declBus(c+118,"rb2", false,-1, 7,0);
    tracep->declBus(c+119,"rb3", false,-1, 7,0);
    tracep->declBus(c+120,"op1", false,-1, 4,0);
    tracep->declBus(c+121,"op2", false,-1, 2,0);
    tracep->declBit(c+122,"rc_we", false,-1);
    tracep->declArray(c+123,"ctrl", false,-1, 267,0);
    tracep->declBus(c+132,"bpv", false,-1, 31,0);
    tracep->declBus(c+133,"bp", false,-1, 1,0);
    tracep->declBus(c+134,"result0", false,-1, 15,0);
    tracep->declBus(c+135,"result1", false,-1, 15,0);
    tracep->declBus(c+136,"s1bp", false,-1, 31,0);
    tracep->declBus(c+137,"s2bp", false,-1, 31,0);
    tracep->declArray(c+1,"sdi", false,-1, 374,0);
    tracep->declArray(c+13,"sdo", false,-1, 95,0);
    tracep->pushNamePrefix("jack ");
    tracep->declBit(c+109,"clk", false,-1);
    tracep->declBit(c+110,"rstn", false,-1);
    tracep->declBit(c+111,"holdn", false,-1);
    tracep->declArray(c+1,"sdi", false,-1, 374,0);
    tracep->declArray(c+13,"sdo", false,-1, 95,0);
    tracep->declBus(c+138,"vector_reg_res", false,-1, 31,0);
    tracep->declQuad(c+139,"inter_reg_res", false,-1, 63,0);
    tracep->declArray(c+141,"s1_reg_res", false,-1, 72,0);
    tracep->declArray(c+144,"s2_reg_res", false,-1, 68,0);
    tracep->declBus(c+147,"s3_reg_res", false,-1, 31,0);
    tracep->declArray(c+148,"RRES", false,-1, 205,0);
    tracep->declArray(c+102,"r", false,-1, 205,0);
    tracep->declArray(c+16,"rin", false,-1, 205,0);
    tracep->declBus(c+23,"lpmuli(0)", false,-1, 17,0);
    tracep->declBus(c+24,"lpmuli(1)", false,-1, 17,0);
    tracep->declBus(c+25,"lpmuli(2)", false,-1, 17,0);
    tracep->declBus(c+26,"lpmuli(3)", false,-1, 17,0);
    tracep->declBus(c+27,"lpmulo(0)", false,-1, 15,0);
    tracep->declBus(c+28,"lpmulo(1)", false,-1, 15,0);
    tracep->declBus(c+29,"lpmulo(2)", false,-1, 15,0);
    tracep->declBus(c+30,"lpmulo(3)", false,-1, 15,0);
    tracep->declArray(c+31,"v", false,-1, 205,0);
    tracep->declBus(c+38,"op1", false,-1, 31,0);
    tracep->declBus(c+39,"op2", false,-1, 31,0);
    tracep->declBus(c+40,"rs1", false,-1, 31,0);
    tracep->declBus(c+41,"rs2", false,-1, 31,0);
    tracep->declQuad(c+42,"s1_res", false,-1, 63,0);
    tracep->declQuad(c+44,"s1_ra", false,-1, 63,0);
    tracep->declQuad(c+46,"s1_r2", false,-1, 63,0);
    tracep->declQuad(c+48,"add_res", false,-1, 63,0);
    tracep->declQuad(c+50,"sub_res", false,-1, 63,0);
    tracep->declQuad(c+52,"mul_res", false,-1, 63,0);
    tracep->declQuad(c+54,"max_res", false,-1, 63,0);
    tracep->declQuad(c+56,"min_res", false,-1, 63,0);
    tracep->declQuad(c+58,"logic_res", false,-1, 63,0);
    tracep->declQuad(c+60,"shift_res", false,-1, 63,0);
    tracep->declBus(c+62,"s1_alusel", false,-1, 3,0);
    tracep->declBus(c+63,"s2sum_res", false,-1, 31,0);
    tracep->declBus(c+64,"s2max_res", false,-1, 31,0);
    tracep->declBus(c+65,"s2min_res", false,-1, 31,0);
    tracep->declBus(c+66,"s2xor_res", false,-1, 31,0);
    tracep->declBit(c+67,"sign", false,-1);
    tracep->declBus(c+68,"s2_res", false,-1, 31,0);
    tracep->pushNamePrefix("mul0 ");
    tracep->declBus(c+23,"muli", false,-1, 17,0);
    tracep->declBus(c+27,"mulo", false,-1, 15,0);
    tracep->declBus(c+155,"SMAX", false,-1, 7,0);
    tracep->declBus(c+156,"SMIN", false,-1, 7,0);
    tracep->declBus(c+157,"UMAX", false,-1, 7,0);
    tracep->declBus(c+69,"z", false,-1, 15,0);
    tracep->declBus(c+70,"nz", false,-1, 15,0);
    tracep->declBus(c+71,"a", false,-1, 7,0);
    tracep->declBus(c+72,"b", false,-1, 7,0);
    tracep->declBus(c+158,"inverted_a", false,-1, 7,0);
    tracep->declBus(c+159,"inverted_b", false,-1, 7,0);
    tracep->declBit(c+73,"signA", false,-1);
    tracep->declBit(c+74,"signB", false,-1);
    tracep->declBit(c+75,"is_there_sat", false,-1);
    tracep->declBus(c+76,"mux", false,-1, 2,0);
    tracep->popNamePrefix(1);
    tracep->pushNamePrefix("mul1 ");
    tracep->declBus(c+24,"muli", false,-1, 17,0);
    tracep->declBus(c+28,"mulo", false,-1, 15,0);
    tracep->declBus(c+155,"SMAX", false,-1, 7,0);
    tracep->declBus(c+156,"SMIN", false,-1, 7,0);
    tracep->declBus(c+157,"UMAX", false,-1, 7,0);
    tracep->declBus(c+77,"z", false,-1, 15,0);
    tracep->declBus(c+78,"nz", false,-1, 15,0);
    tracep->declBus(c+79,"a", false,-1, 7,0);
    tracep->declBus(c+80,"b", false,-1, 7,0);
    tracep->declBus(c+160,"inverted_a", false,-1, 7,0);
    tracep->declBus(c+161,"inverted_b", false,-1, 7,0);
    tracep->declBit(c+81,"signA", false,-1);
    tracep->declBit(c+82,"signB", false,-1);
    tracep->declBit(c+83,"is_there_sat", false,-1);
    tracep->declBus(c+84,"mux", false,-1, 2,0);
    tracep->popNamePrefix(1);
    tracep->pushNamePrefix("mul2 ");
    tracep->declBus(c+25,"muli", false,-1, 17,0);
    tracep->declBus(c+29,"mulo", false,-1, 15,0);
    tracep->declBus(c+155,"SMAX", false,-1, 7,0);
    tracep->declBus(c+156,"SMIN", false,-1, 7,0);
    tracep->declBus(c+157,"UMAX", false,-1, 7,0);
    tracep->declBus(c+85,"z", false,-1, 15,0);
    tracep->declBus(c+86,"nz", false,-1, 15,0);
    tracep->declBus(c+87,"a", false,-1, 7,0);
    tracep->declBus(c+88,"b", false,-1, 7,0);
    tracep->declBus(c+162,"inverted_a", false,-1, 7,0);
    tracep->declBus(c+163,"inverted_b", false,-1, 7,0);
    tracep->declBit(c+89,"signA", false,-1);
    tracep->declBit(c+90,"signB", false,-1);
    tracep->declBit(c+91,"is_there_sat", false,-1);
    tracep->declBus(c+92,"mux", false,-1, 2,0);
    tracep->popNamePrefix(1);
    tracep->pushNamePrefix("mul3 ");
    tracep->declBus(c+26,"muli", false,-1, 17,0);
    tracep->declBus(c+30,"mulo", false,-1, 15,0);
    tracep->declBus(c+155,"SMAX", false,-1, 7,0);
    tracep->declBus(c+156,"SMIN", false,-1, 7,0);
    tracep->declBus(c+157,"UMAX", false,-1, 7,0);
    tracep->declBus(c+93,"z", false,-1, 15,0);
    tracep->declBus(c+94,"nz", false,-1, 15,0);
    tracep->declBus(c+95,"a", false,-1, 7,0);
    tracep->declBus(c+96,"b", false,-1, 7,0);
    tracep->declBus(c+164,"inverted_a", false,-1, 7,0);
    tracep->declBus(c+165,"inverted_b", false,-1, 7,0);
    tracep->declBit(c+97,"signA", false,-1);
    tracep->declBit(c+98,"signB", false,-1);
    tracep->declBit(c+99,"is_there_sat", false,-1);
    tracep->declBus(c+100,"mux", false,-1, 2,0);
    tracep->popNamePrefix(1);
    tracep->pushNamePrefix("unnamedblk11 ");
    tracep->declBus(c+101,"i", false,-1, 31,0);
    tracep->popNamePrefix(3);
}

VL_ATTR_COLD void Vsparrow___024root__trace_init_sub__TOP__sparrow__0(Vsparrow___024root* vlSelf, VerilatedVcd* tracep) {
    if (false && vlSelf) {}  // Prevent unused
    Vsparrow__Syms* const __restrict vlSymsp VL_ATTR_UNUSED = vlSelf->vlSymsp;
    VL_DEBUG_IF(VL_DBG_MSGF("+    Vsparrow___024root__trace_init_sub__TOP__sparrow__0\n"); );
    // Init
    const int c = vlSymsp->__Vm_baseCode;
    // Body
    tracep->declBus(c+166,"XLEN", false,-1, 31,0);
    tracep->declBus(c+167,"VLEN", false,-1, 31,0);
    tracep->declBus(c+168,"LOGSZ", false,-1, 31,0);
    tracep->declBus(c+169,"VSIZE", false,-1, 31,0);
    tracep->declBus(c+170,"S1_NOP", false,-1, 4,0);
    tracep->declBus(c+171,"S1_ADD", false,-1, 4,0);
    tracep->declBus(c+172,"S1_SUB", false,-1, 4,0);
    tracep->declBus(c+173,"S1_MUL", false,-1, 4,0);
    tracep->declBus(c+174,"S1_MAX", false,-1, 4,0);
    tracep->declBus(c+175,"S1_MIN", false,-1, 4,0);
    tracep->declBus(c+176,"S1_AND", false,-1, 4,0);
    tracep->declBus(c+177,"S1_OR", false,-1, 4,0);
    tracep->declBus(c+178,"S1_XOR", false,-1, 4,0);
    tracep->declBus(c+179,"S1_NAND", false,-1, 4,0);
    tracep->declBus(c+180,"S1_NOR", false,-1, 4,0);
    tracep->declBus(c+181,"S1_XNOR", false,-1, 4,0);
    tracep->declBus(c+182,"S1_SADD", false,-1, 4,0);
    tracep->declBus(c+183,"S1_SSUB", false,-1, 4,0);
    tracep->declBus(c+184,"S1_SMUL", false,-1, 4,0);
    tracep->declBus(c+185,"S1_MOVB", false,-1, 4,0);
    tracep->declBus(c+186,"S1_SHFT", false,-1, 4,0);
    tracep->declBus(c+187,"S1_UMUL", false,-1, 4,0);
    tracep->declBus(c+188,"S1_UMAX", false,-1, 4,0);
    tracep->declBus(c+189,"S1_UMIN", false,-1, 4,0);
    tracep->declBus(c+190,"S1_SSHFT", false,-1, 4,0);
    tracep->declBus(c+191,"S1_USADD", false,-1, 4,0);
    tracep->declBus(c+192,"S1_USSUB", false,-1, 4,0);
    tracep->declBus(c+193,"S1_USMUL", false,-1, 4,0);
    tracep->declBus(c+194,"S2_NOP", false,-1, 2,0);
    tracep->declBus(c+195,"S2_SUM", false,-1, 2,0);
    tracep->declBus(c+196,"S2_MAX", false,-1, 2,0);
    tracep->declBus(c+197,"S2_MIN", false,-1, 2,0);
    tracep->declBus(c+198,"S2_XOR", false,-1, 2,0);
    tracep->declBus(c+199,"S2_USUM", false,-1, 2,0);
    tracep->declBus(c+200,"S2_UMAX", false,-1, 2,0);
    tracep->declBus(c+201,"S2_UMIN", false,-1, 2,0);
}

VL_ATTR_COLD void Vsparrow___024root__trace_init_top(Vsparrow___024root* vlSelf, VerilatedVcd* tracep) {
    if (false && vlSelf) {}  // Prevent unused
    Vsparrow__Syms* const __restrict vlSymsp VL_ATTR_UNUSED = vlSelf->vlSymsp;
    VL_DEBUG_IF(VL_DBG_MSGF("+    Vsparrow___024root__trace_init_top\n"); );
    // Body
    Vsparrow___024root__trace_init_sub__TOP__0(vlSelf, tracep);
    tracep->pushNamePrefix("sparrow ");
    Vsparrow___024root__trace_init_sub__TOP__sparrow__0(vlSelf, tracep);
    tracep->popNamePrefix(1);
}

VL_ATTR_COLD void Vsparrow___024root__trace_full_top_0(void* voidSelf, VerilatedVcd::Buffer* bufp);
void Vsparrow___024root__trace_chg_top_0(void* voidSelf, VerilatedVcd::Buffer* bufp);
void Vsparrow___024root__trace_cleanup(void* voidSelf, VerilatedVcd* /*unused*/);

VL_ATTR_COLD void Vsparrow___024root__trace_register(Vsparrow___024root* vlSelf, VerilatedVcd* tracep) {
    if (false && vlSelf) {}  // Prevent unused
    Vsparrow__Syms* const __restrict vlSymsp VL_ATTR_UNUSED = vlSelf->vlSymsp;
    VL_DEBUG_IF(VL_DBG_MSGF("+    Vsparrow___024root__trace_register\n"); );
    // Body
    tracep->addFullCb(&Vsparrow___024root__trace_full_top_0, vlSelf);
    tracep->addChgCb(&Vsparrow___024root__trace_chg_top_0, vlSelf);
    tracep->addCleanupCb(&Vsparrow___024root__trace_cleanup, vlSelf);
}

VL_ATTR_COLD void Vsparrow___024root__trace_full_sub_0(Vsparrow___024root* vlSelf, VerilatedVcd::Buffer* bufp);

VL_ATTR_COLD void Vsparrow___024root__trace_full_top_0(void* voidSelf, VerilatedVcd::Buffer* bufp) {
    VL_DEBUG_IF(VL_DBG_MSGF("+    Vsparrow___024root__trace_full_top_0\n"); );
    // Init
    Vsparrow___024root* const __restrict vlSelf VL_ATTR_UNUSED = static_cast<Vsparrow___024root*>(voidSelf);
    Vsparrow__Syms* const __restrict vlSymsp VL_ATTR_UNUSED = vlSelf->vlSymsp;
    // Body
    Vsparrow___024root__trace_full_sub_0((&vlSymsp->TOP), bufp);
}

VL_ATTR_COLD void Vsparrow___024root__trace_full_sub_0(Vsparrow___024root* vlSelf, VerilatedVcd::Buffer* bufp) {
    if (false && vlSelf) {}  // Prevent unused
    Vsparrow__Syms* const __restrict vlSymsp VL_ATTR_UNUSED = vlSelf->vlSymsp;
    VL_DEBUG_IF(VL_DBG_MSGF("+    Vsparrow___024root__trace_full_sub_0\n"); );
    // Init
    uint32_t* const oldp VL_ATTR_UNUSED = bufp->oldp(vlSymsp->__Vm_baseCode);
    VlWide<3>/*95:0*/ __Vtemp_h76fe818b__0;
    VlWide<3>/*95:0*/ __Vtemp_h7d3ae7b3__0;
    VlWide<7>/*223:0*/ __Vtemp_h762ac489__0;
    // Body
    bufp->fullWData(oldp+1,(vlSelf->wrapper__DOT__sdi),375);
    bufp->fullWData(oldp+13,(vlSelf->wrapper__DOT__sdo),96);
    bufp->fullWData(oldp+16,(vlSelf->wrapper__DOT__jack__DOT__rin),206);
    bufp->fullIData(oldp+23,(vlSelf->wrapper__DOT__jack__DOT__lpmuli__0280__029),18);
    bufp->fullIData(oldp+24,(vlSelf->wrapper__DOT__jack__DOT__lpmuli__0281__029),18);
    bufp->fullIData(oldp+25,(vlSelf->wrapper__DOT__jack__DOT__lpmuli__0282__029),18);
    bufp->fullIData(oldp+26,(vlSelf->wrapper__DOT__jack__DOT__lpmuli__0283__029),18);
    bufp->fullSData(oldp+27,(vlSelf->wrapper__DOT__jack__DOT__lpmulo__0280__029),16);
    bufp->fullSData(oldp+28,(vlSelf->wrapper__DOT__jack__DOT__lpmulo__0281__029),16);
    bufp->fullSData(oldp+29,(vlSelf->wrapper__DOT__jack__DOT__lpmulo__0282__029),16);
    bufp->fullSData(oldp+30,(vlSelf->wrapper__DOT__jack__DOT__lpmulo__0283__029),16);
    bufp->fullWData(oldp+31,(vlSelf->wrapper__DOT__jack__DOT__v),206);
    bufp->fullIData(oldp+38,(vlSelf->wrapper__DOT__jack__DOT__op1),32);
    bufp->fullIData(oldp+39,(vlSelf->wrapper__DOT__jack__DOT__op2),32);
    bufp->fullIData(oldp+40,(vlSelf->wrapper__DOT__jack__DOT__rs1),32);
    bufp->fullIData(oldp+41,(vlSelf->wrapper__DOT__jack__DOT__rs2),32);
    bufp->fullQData(oldp+42,(vlSelf->wrapper__DOT__jack__DOT__s1_res),64);
    bufp->fullQData(oldp+44,(vlSelf->wrapper__DOT__jack__DOT__s1_ra),64);
    bufp->fullQData(oldp+46,(vlSelf->wrapper__DOT__jack__DOT__s1_r2),64);
    bufp->fullQData(oldp+48,(vlSelf->wrapper__DOT__jack__DOT__add_res),64);
    bufp->fullQData(oldp+50,(vlSelf->wrapper__DOT__jack__DOT__sub_res),64);
    bufp->fullQData(oldp+52,(vlSelf->wrapper__DOT__jack__DOT__mul_res),64);
    bufp->fullQData(oldp+54,(vlSelf->wrapper__DOT__jack__DOT__max_res),64);
    bufp->fullQData(oldp+56,(vlSelf->wrapper__DOT__jack__DOT__min_res),64);
    bufp->fullQData(oldp+58,(vlSelf->wrapper__DOT__jack__DOT__logic_res),64);
    bufp->fullQData(oldp+60,(vlSelf->wrapper__DOT__jack__DOT__shift_res),64);
    bufp->fullCData(oldp+62,(vlSelf->wrapper__DOT__jack__DOT__s1_alusel),4);
    bufp->fullIData(oldp+63,(vlSelf->wrapper__DOT__jack__DOT__s2sum_res),32);
    bufp->fullIData(oldp+64,(vlSelf->wrapper__DOT__jack__DOT__s2max_res),32);
    bufp->fullIData(oldp+65,(vlSelf->wrapper__DOT__jack__DOT__s2min_res),32);
    bufp->fullIData(oldp+66,(vlSelf->wrapper__DOT__jack__DOT__s2xor_res),32);
    bufp->fullBit(oldp+67,(vlSelf->wrapper__DOT__jack__DOT__sign));
    bufp->fullIData(oldp+68,(vlSelf->wrapper__DOT__jack__DOT__s2_res),32);
    bufp->fullSData(oldp+69,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__z),16);
    bufp->fullSData(oldp+70,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__nz),16);
    bufp->fullCData(oldp+71,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__a),8);
    bufp->fullCData(oldp+72,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__b),8);
    bufp->fullBit(oldp+73,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__signA));
    bufp->fullBit(oldp+74,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__signB));
    bufp->fullBit(oldp+75,((1U & vlSelf->wrapper__DOT__jack__DOT__lpmuli__0280__029)));
    bufp->fullCData(oldp+76,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__mux),3);
    bufp->fullSData(oldp+77,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__z),16);
    bufp->fullSData(oldp+78,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__nz),16);
    bufp->fullCData(oldp+79,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__a),8);
    bufp->fullCData(oldp+80,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__b),8);
    bufp->fullBit(oldp+81,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__signA));
    bufp->fullBit(oldp+82,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__signB));
    bufp->fullBit(oldp+83,((1U & vlSelf->wrapper__DOT__jack__DOT__lpmuli__0281__029)));
    bufp->fullCData(oldp+84,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__mux),3);
    bufp->fullSData(oldp+85,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__z),16);
    bufp->fullSData(oldp+86,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__nz),16);
    bufp->fullCData(oldp+87,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__a),8);
    bufp->fullCData(oldp+88,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__b),8);
    bufp->fullBit(oldp+89,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__signA));
    bufp->fullBit(oldp+90,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__signB));
    bufp->fullBit(oldp+91,((1U & vlSelf->wrapper__DOT__jack__DOT__lpmuli__0282__029)));
    bufp->fullCData(oldp+92,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__mux),3);
    bufp->fullSData(oldp+93,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__z),16);
    bufp->fullSData(oldp+94,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__nz),16);
    bufp->fullCData(oldp+95,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__a),8);
    bufp->fullCData(oldp+96,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__b),8);
    bufp->fullBit(oldp+97,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__signA));
    bufp->fullBit(oldp+98,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__signB));
    bufp->fullBit(oldp+99,((1U & vlSelf->wrapper__DOT__jack__DOT__lpmuli__0283__029)));
    bufp->fullCData(oldp+100,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__mux),3);
    bufp->fullIData(oldp+101,(vlSelf->wrapper__DOT__jack__DOT__unnamedblk11__DOT__i),32);
    bufp->fullWData(oldp+102,(vlSelf->wrapper__DOT__jack__DOT__r),206);
    bufp->fullBit(oldp+109,(vlSelf->clk));
    bufp->fullBit(oldp+110,(vlSelf->rstn));
    bufp->fullBit(oldp+111,(vlSelf->holdn));
    bufp->fullCData(oldp+112,(vlSelf->ra0),8);
    bufp->fullCData(oldp+113,(vlSelf->ra1),8);
    bufp->fullCData(oldp+114,(vlSelf->ra2),8);
    bufp->fullCData(oldp+115,(vlSelf->ra3),8);
    bufp->fullCData(oldp+116,(vlSelf->rb0),8);
    bufp->fullCData(oldp+117,(vlSelf->rb1),8);
    bufp->fullCData(oldp+118,(vlSelf->rb2),8);
    bufp->fullCData(oldp+119,(vlSelf->rb3),8);
    bufp->fullCData(oldp+120,(vlSelf->op1),5);
    bufp->fullCData(oldp+121,(vlSelf->op2),3);
    bufp->fullBit(oldp+122,(vlSelf->rc_we));
    bufp->fullWData(oldp+123,(vlSelf->ctrl),268);
    bufp->fullIData(oldp+132,(vlSelf->bpv),32);
    bufp->fullCData(oldp+133,(vlSelf->bp),2);
    bufp->fullSData(oldp+134,(vlSelf->result0),16);
    bufp->fullSData(oldp+135,(vlSelf->result1),16);
    bufp->fullIData(oldp+136,(vlSelf->s1bp),32);
    bufp->fullIData(oldp+137,(vlSelf->s2bp),32);
    bufp->fullIData(oldp+138,(0U),32);
    bufp->fullQData(oldp+139,(0ULL),64);
    __Vtemp_h76fe818b__0[0U] = 0U;
    __Vtemp_h76fe818b__0[1U] = 0U;
    __Vtemp_h76fe818b__0[2U] = 0U;
    bufp->fullWData(oldp+141,(__Vtemp_h76fe818b__0),73);
    __Vtemp_h7d3ae7b3__0[0U] = 0U;
    __Vtemp_h7d3ae7b3__0[1U] = 0U;
    __Vtemp_h7d3ae7b3__0[2U] = 0U;
    bufp->fullWData(oldp+144,(__Vtemp_h7d3ae7b3__0),69);
    bufp->fullIData(oldp+147,(0U),32);
    __Vtemp_h762ac489__0[0U] = 0U;
    __Vtemp_h762ac489__0[1U] = 0U;
    __Vtemp_h762ac489__0[2U] = 0U;
    __Vtemp_h762ac489__0[3U] = 0U;
    __Vtemp_h762ac489__0[4U] = 0U;
    __Vtemp_h762ac489__0[5U] = 0U;
    __Vtemp_h762ac489__0[6U] = 0U;
    bufp->fullWData(oldp+148,(__Vtemp_h762ac489__0),206);
    bufp->fullCData(oldp+155,(0x7fU),8);
    bufp->fullCData(oldp+156,(0x80U),8);
    bufp->fullCData(oldp+157,(0xffU),8);
    bufp->fullCData(oldp+158,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__inverted_a),8);
    bufp->fullCData(oldp+159,(vlSelf->wrapper__DOT__jack__DOT__mul0__DOT__inverted_b),8);
    bufp->fullCData(oldp+160,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__inverted_a),8);
    bufp->fullCData(oldp+161,(vlSelf->wrapper__DOT__jack__DOT__mul1__DOT__inverted_b),8);
    bufp->fullCData(oldp+162,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__inverted_a),8);
    bufp->fullCData(oldp+163,(vlSelf->wrapper__DOT__jack__DOT__mul2__DOT__inverted_b),8);
    bufp->fullCData(oldp+164,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__inverted_a),8);
    bufp->fullCData(oldp+165,(vlSelf->wrapper__DOT__jack__DOT__mul3__DOT__inverted_b),8);
    bufp->fullIData(oldp+166,(0x20U),32);
    bufp->fullIData(oldp+167,(8U),32);
    bufp->fullIData(oldp+168,(2U),32);
    bufp->fullIData(oldp+169,(4U),32);
    bufp->fullCData(oldp+170,(0U),5);
    bufp->fullCData(oldp+171,(1U),5);
    bufp->fullCData(oldp+172,(2U),5);
    bufp->fullCData(oldp+173,(3U),5);
    bufp->fullCData(oldp+174,(5U),5);
    bufp->fullCData(oldp+175,(6U),5);
    bufp->fullCData(oldp+176,(7U),5);
    bufp->fullCData(oldp+177,(8U),5);
    bufp->fullCData(oldp+178,(9U),5);
    bufp->fullCData(oldp+179,(0xaU),5);
    bufp->fullCData(oldp+180,(0xbU),5);
    bufp->fullCData(oldp+181,(0xcU),5);
    bufp->fullCData(oldp+182,(0xdU),5);
    bufp->fullCData(oldp+183,(0xeU),5);
    bufp->fullCData(oldp+184,(0xfU),5);
    bufp->fullCData(oldp+185,(0x10U),5);
    bufp->fullCData(oldp+186,(0x11U),5);
    bufp->fullCData(oldp+187,(0x13U),5);
    bufp->fullCData(oldp+188,(0x15U),5);
    bufp->fullCData(oldp+189,(0x16U),5);
    bufp->fullCData(oldp+190,(0x19U),5);
    bufp->fullCData(oldp+191,(0x1dU),5);
    bufp->fullCData(oldp+192,(0x1eU),5);
    bufp->fullCData(oldp+193,(0x1fU),5);
    bufp->fullCData(oldp+194,(0U),3);
    bufp->fullCData(oldp+195,(1U),3);
    bufp->fullCData(oldp+196,(2U),3);
    bufp->fullCData(oldp+197,(3U),3);
    bufp->fullCData(oldp+198,(4U),3);
    bufp->fullCData(oldp+199,(5U),3);
    bufp->fullCData(oldp+200,(6U),3);
    bufp->fullCData(oldp+201,(7U),3);
}
